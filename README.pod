=head1 NAME

limebar - Featherweight lime-scented bar. Heavily inspired by lemon bar.

=head1 SYNOPSIS

I<limebar> [-h | -g I<width>B<x>I<height>B<+>I<x>B<+>I<y> | -c I<command> | -b | -d | -f I<fonts> | -p | -D | -n I<name> | -u I<pixel> | -B I<color> | -F I<color> | -U I<color>] | -m I<modules>

=head1 DESCRIPTION

B<limebar> is a lightweight bar based on XCB, cairo and pango. Provides full UTF-8 support, basic formatting, RandR support and EWMH compliance without wasting your precious memory. Modules can also be written to add features

=head1 OPTIONS

=over

=item B<-h>

Display the help and exit.

=item B<-g> I<width>B<x>I<height>B<+>I<x>B<+>I<y>

Set the window geometry. If a parameter is omitted it's filled with the default value. If the I<y> parameter is specified along with the B<-b> switch then the position is relative to the bottom of the screen.

=item B<-c> I<text>

Set the formating text to be used as the input as default. Usefull if you use labels.

=item B<-b>

Dock the bar at the bottom of the screen.

=item B<-d>

Force docking without asking the window manager. This is needed if the window manager isn't EWMH compliant.

=item B<-f> I<fonts>

Define the fonts to load. The first one in the list will be considered the default font.

=item B<-p>

Make the bar permanent, don't exit after the standard input is closed.

=item B<-D>

Duplicate the input to all the output. %s will be replace by the output name, %x by its x position and %w by its width. Those symbols can be escaped.

=item B<-n> I<name>

Set the WM_NAME atom value for the bar.

=item B<-u> I<pixel>

Sets the underline width in pixels. The default is 1.

=item B<-B> I<color>

Set the background color of the bar. I<color> must be specified in the hex format (#aarrggbb, #rrggbb, #rgb). If no compositor such as compton or xcompmgr is running the alpha channel is silently ignored.

=item B<-F> I<color>

Set the foreground color of the bar. Accepts the same color formats as B<-B>.

=item B<-U> I<color>

Set the underline color of the bar. Accepts the same color formats as B<-B>.

=item B<-m> I<modules>

List of modules to load. Modules add features and can be written by inhereting from Module, and compile it into a separate shared library.

=back

=head1 FORMATTING

limebar provides a screenrc-inspired formatting syntax to allow full customization at runtime. Every formatting block is opened with C<%{> and closed by C<}> and accepts the following commands, the parser tries it's best to handle malformed input. C<%{> can be escaped. limebar also ascept command that are not rendered. They are enclosed by C<%[> and C<]>. Those character can be escaped.

B<Pre render formatting block>

=over

=item B<L>:I<label>:I<value>:

Set label I<label> to hold I<value>.

=back

B<Render formatting block>

=over

=item B<|>

Draw a vertical line.

=item B<m>

Replaced by the name of the current monitor.

=item B<R>

Swap the current background and foreground colors.

=item B<l>

Aligns the following text to the left side of the screen.

=item B<c>

Aligns the following text to the center of the screen.

=item B<r>

Aligns the following text to the right side of the screen.

=item B<O>I<width>

Offset the current position by I<width> pixels in the alignment direction.

=item B<B>I<color>

Set the text background color. The parameter I<color> can be I<-> or a color in one of the formats mentioned before enclosed by I<:>. The special value I<-> resets the color to the default one.

=item B<F>I<color>

Set the text foreground color. The parameter I<color> can be I<-> or a color in one of the formats mentioned before enclosed by I<:>. The special value I<-> resets the color to the default one.

=item B<U>I<color>

Set the text underline color. The parameter I<color> can be I<-> or a color in one of the formats mentioned before enclosed by I<:>. The special value I<-> resets the color to the default one.

=item B<T>I<font>

Set the font used to draw the following text. The parameter I<font> can either be I<-> or the pango description of the font enclosed by I<:>. If the parameter is I<-> limebar resets to the default font.

=item B<I>:I<image>:

Display an image on the bar resized so the height fits the bar.

=item B<A>I<button>I<W>:I<command>:

Create a clickable area starting from the current position, when the area is clicked I<command> is printed on stdout. The area is closed when a B<A> token, not followed by : is encountered.

Eg. I<%{A:reboot:} Click here to reboot %{A}>

The I<button> field is optional, it defaults to the left button, and it's a number ranging from 1 to 9 which maps to the left, middle, right, scroll up and scroll down movements. Your mileage may vary.

I<W> field is optional, it will output the position of the clickable area after the command.

Nested clickable areas can trigger different commands.

Eg. I<%{A:reboot:}%{A3:halt:} Left click to reboot, right click to shutdown %{A}%{A}>

=item B<L>:I<label>:

Use a label (display the text associated to the label).

=item B<S>:I<dir>:

Change the monitor the bar is rendered to. I<dir> is the name of the monitor

=back

B<Attribute modifiers>

=over

=item B<+>I<attribute>

Set the attribute I<attribute> for the following text.

=item B<->I<attribute>

Unset the attribute I<attribute> for the following text.

=item B<!>I<attribute>

Toggle the attribute I<attribute> for the following text.

=back

Where I<attribute> is one of the following

=over

=item B<o>

Draw a line over the text.

=item B<u>

Draw a line under the text.

=back

=head1 RESOURCES

limebar can use a config file (located at I<.config/limebar/limebarrc>) that uses Xresources syntax:

=over

limebar.foreground:			 			the default foreground color of the bar (color)

limebar.background:			 			the default background color of the bar (color)

limebar.underline:			 			the default underline color of the bar (color)

limebar.bottom:   					 	should the bar be displayed on the bottom (boolean)

limebar.dock:     					 	force dock (boolean)

limebar.font:     					 	default font (string, pango format)

limebar.permanent:					 	should the bar be permanent (boolean)

limebar.duplicate:					 	should the input be duplicated to all the outputs

limebar.wm-name:  					 	WM_NAME atom value for the bar (string)

limebar.underline:					 	size of the underline (unsigned int)

limebar.geometry:				  	 	geometry of the bar. Format : widthxheight+x+y. Some of the parameter can be left empty.

=back

=head1 OUTPUT

Clicking on an area makes limebar output the command to stdout, followed by a newline, allowing the user to pipe it into a script, execute it or simply ignore it. Simple and powerful, that's it.

=head1 WWW

L<git repository|https://github.com/notfound4/LimeBar>

=head1 AUTHOR

Heavily based on the work of:

2012-2015 (C) The Lemon Man

RandR support was kindly contributed by jvvv

Clickable areas support was heavily based off u-ra contribution

Modification by notfound404
